---
import MusicCharts from "./musiccharts";

interface artistInfoType {
    name?: string;
    count?: string;
}

interface daily {
    name?: string;
    scrobbles?: number;
}

const apiKey = import.meta.env.PUBLIC__LASTFM_API_KEY;
const username = import.meta.env.PUBLIC__LASTFM_USERNAME;

function getDailyTimestamps(daysAgo: number) {
    const date = new Date();
    const dayNumber = date.getUTCDate();
    date.setUTCDate(date.getUTCDate() - daysAgo);
    date.setUTCHours(0, 0, 0, 0);
    const fromTimestamp = Math.floor(date.getTime() / 1000);
    const toTimestamp = fromTimestamp + 86399;
    return { from: fromTimestamp, to: toTimestamp, day: dayLabels[date.getUTCDay()] };
}

let weeklyScrobbles: daily[] = [];
let upperStatsArray: number[] = [];
let artistsInfo: artistInfoType[] = [];
const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

try {
    const dailyPromises = Array.from({ length: 7 }, (_, i) => {
        const { from, to, day } = getDailyTimestamps(6 - i);
        const url = `https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=${username}&from=${from}&to=${to}&api_key=${apiKey}&format=json`;
        
        return fetch(url)
            .then(res => res.ok ? res.json() : Promise.reject(`Failed: ${res.status}`))
            .then(data => ({
                name: String(day),
                scrobbles: data?.recenttracks?.track?.length ?? 0
            }))
            .catch(error => {
                console.error(`Error fetching day ${day}:`, error);
                return { name: String(day), scrobbles: 0 };
            });
    });

    const upperStatsPromise = fetch(`https://ws.audioscrobbler.com/2.0/?method=user.getinfo&user=${username}&api_key=${apiKey}&format=json`)
        .then(res => res.ok ? res.json() : Promise.reject(`Stats failed: ${res.status}`))
        .then(data => data.user)
        .catch(error => {
            console.error('Error fetching user stats:', error);
            return { playcount: 0, track_count: 0, artist_count: 0, album_count: 0 };
        });

    const topArtistsPromise = fetch(`https://ws.audioscrobbler.com/2.0/?method=user.gettopartists&user=${username}&period=7day&api_key=${apiKey}&format=json&limit=5`)
        .then(res => res.ok ? res.json() : Promise.reject(`Artists failed: ${res.status}`))
        .then(data => data?.topartists?.artist?.map((artist: any) => ({
            name: artist?.name,
            count: artist?.playcount,
        })) ?? [])
        .catch(error => {
            console.error('Error fetching top artists:', error);
            return [];
        });

    const [dailyResults, upperStats, topArtists] = await Promise.all([
        Promise.all(dailyPromises),
        upperStatsPromise,
        topArtistsPromise
    ]);

    weeklyScrobbles = dailyResults;
    artistsInfo = topArtists;
    upperStatsArray = [
        upperStats.playcount,
        upperStats.track_count,
        upperStats.artist_count,
        upperStats.album_count
    ];

} catch (error) {
    console.error('Error: ', error);
    weeklyScrobbles = Array.from({ length: 7 }, (_, i) => ({
        name: String(new Date().getUTCDate() - (6 - i)),
        scrobbles: 0
    }));
}
console.log(weeklyScrobbles)
---

<div class="flex justify-around mt-5">
    <div>
        <p class="font-thin mb-2">Complete music scrobbles</p>
        <div class="flex flex-col justify-start items-start h-full w-fit gap-2">
            <p>Play count: {upperStatsArray[0]}</p>
            <p>Track count: {upperStatsArray[1]}</p>
            <p>Artist count: {upperStatsArray[2]}</p>
            <p>Album count: {upperStatsArray[3]}</p>
        </div>
    </div>
    <div>
        <p class="font-thin mb-2">Top artists of the week</p>
        <div class="">
            {
                artistsInfo.map((artist) => (
                    <div class="flex flex-row justify-start items-start h-full w-fit gap-2">
                        <div class="flex gap-2">
                            <p>{artist.name}</p>
                            <p>plays: {artist.count}</p>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</div>

<div class="flex flex-col h-[15rem] w-[80svh] lg:w-[65rem] mt-10">
    <p class="my-4 font-thin text-center">Daily music scrobbles</p>
    <div class="w-full h-full pr-10 lg:px-20 select-none">
        <MusicCharts data={weeklyScrobbles} client:visible>
            <div class='w-full h-full flex items-center justify-center'>
                <div class="text-gray-400 text-sm">Loading chart...</div>
            </div>
        </MusicCharts>
    </div>
</div>
<style>
    :global(.recharts-wrapper *) {
        outline: none;
    }

    :global(.recharts-surface) {
        outline: none;
    }
</style>